class GuildSettingsManager{constructor(){this.guildConfigs=[],this.selectedGuildId=null,this.initializeInterface(),window.guildSettingsManager=this}async initializeInterface(){if(document.getElementById("guild-settings-container"))try{this.showMessage("Loading guild configurations...","info"),await this.loadGuildConfigs(),this.initializeGuildSelector(),this.initializeFormHandlers(),this.setupManualWhitelistButton(),await this.checkDetectedGuilds(),document.getElementById("settings-message").classList.add("hidden");const e=document.getElementById("refresh-detected-guilds");e&&e.addEventListener("click",(async e=>{e.preventDefault(),await this.checkDetectedGuilds()}))}catch(e){console.error("Failed to initialize guild settings:",e),this.showMessage(`Error loading configurations: ${e.message}`,"error")}}async loadGuildConfigs(){try{const e=await fetch("/api/guilds");if(!e.ok)throw new Error(`HTTP error ${e.status}`);this.guildConfigs=await e.json(),this.checkDetectedGuilds()}catch(e){throw console.error("Failed to load guild configurations:",e),e}}async checkDetectedGuilds(){try{const e=document.getElementById("detected-guilds-section"),t=document.getElementById("detected-guilds-container"),i=document.getElementById("detected-guilds-count");if(!e||!t)return;t.innerHTML='\n        <div class="flex justify-center py-4">\n          <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600"></div>\n        </div>\n      ';const n=await fetch("/api/guilds/detected");if(!n.ok)return void(t.innerHTML=`\n          <div class="p-4 bg-red-50 text-red-700 rounded-md">\n            <p>Failed to fetch detected guilds: ${n.status}</p>\n            <p class="text-sm mt-2">This could be because you need to restart the server after adding the API endpoint.</p>\n          </div>\n        `);const d=(await n.json()).filter((e=>!e.authorized));d.length>0?(e.classList.remove("hidden"),i&&(i.textContent=d.length.toString()),t.innerHTML="",d.sort(((e,t)=>e.name.localeCompare(t.name))).forEach((e=>t.appendChild(this.createDetectedGuildCard(e))))):(e.classList.add("hidden"),t.innerHTML="")}catch(e){console.error("Failed to check for detected guilds:",e),this.showMessage(`Error checking for detected guilds: ${e.message}`,"error")}}createDetectedGuildCard(e){const t=document.createElement("div");t.className="border rounded-md p-4 bg-white shadow-sm flex justify-between items-center",t.dataset.guildId=e.id;let i="https://cdn.discordapp.com/embed/avatars/0.png";e.icon&&(i=`https://cdn.discordapp.com/icons/${e.id}/${e.icon}.png?size=128`);const n=e.detectedAt?new Date(e.detectedAt).toLocaleString():"Unknown date",d=e.memberCount?`<p class="text-xs text-gray-400">Members: ${e.memberCount}</p>`:"";t.innerHTML=`\n      <div class="flex items-center space-x-3">\n        <img src="${i}" alt="${e.name}" class="w-10 h-10 rounded-full object-cover border border-gray-200" onerror="this.src='https://cdn.discordapp.com/embed/avatars/0.png'">\n        <div>\n          <h4 class="font-medium">${e.name}</h4>\n          <p class="text-sm text-gray-500">ID: ${e.id}</p>\n          <p class="text-xs text-gray-400">First detected: ${n}</p>\n          ${d}\n        </div>\n      </div>\n      <button class="authorize-guild-btn px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700 transition-colors">\n        Authorize\n      </button>\n    `;const s=t.querySelector(".authorize-guild-btn");return s.addEventListener("click",(async()=>{s.disabled=!0,s.textContent="Authorizing...",s.classList.add("opacity-75");try{await this.whitelistDetectedGuild(e),this.checkDetectedGuilds()}catch(e){console.error("Failed to authorize guild:",e),s.textContent="Authorize",s.disabled=!1,s.classList.remove("opacity-75"),this.showMessage(`Failed to authorize guild: ${e.message}`,"error")}})),t}async whitelistDetectedGuild(e){try{const t={guildId:e.id,name:e.name,icon:e.icon,memberCount:e.memberCount,authorized:!0,whitelisted:!0,summonEmoji:"‚ú®",adminRoles:[],features:{breeding:!0,combat:!0,itemCreation:!0},prompts:{intro:"You are now conversing with {avatar_name}, a unique AI character with its own personality and abilities.",summon:"You are {avatar_name}, responding to being summoned by {user_name}.",attack:"You are {avatar_name}, attacking {target_name} with your abilities.",defend:"You are {avatar_name}, defending against an attack.",breed:"You are {avatar_name}, breeding with {target_name} to create a new entity."},rateLimiting:{messages:5,interval:60},toolEmojis:{summon:"üîÆ",breed:"üèπ",attack:"‚öîÔ∏è",defend:"üõ°Ô∏è"}};try{const i=await fetch(`/api/guilds/${e.id}`);if(i.ok){const n=await i.json();Object.assign(t,n,{authorized:!0,whitelisted:!0,name:e.name,icon:e.icon,memberCount:e.memberCount})}}catch(e){console.warn(`Couldn't check for existing guild config: ${e.message}`)}const i=await fetch("/api/guilds",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!i.ok){const e=await i.json();throw new Error(e.error||`HTTP error ${i.status}`)}await this.loadGuildConfigs(),this.initializeGuildSelector(),this.showMessage(`Guild "${e.name}" has been authorized and configured with default settings.`,"success");try{await fetch(`/api/guilds/${e.id}/clear-cache`,{method:"POST"})}catch(e){console.warn("Failed to clear guild cache:",e)}return!0}catch(e){throw console.error("Failed to authorize guild:",e),this.showMessage(`Failed to authorize guild: ${e.message}`,"error"),e}}initializeGuildSelector(){const e=document.getElementById("guild-cards-container");if(!e)return;e.innerHTML="",0===this.guildConfigs.length?e.innerHTML='\n        <div class="col-span-full p-4 text-center border border-dashed border-gray-300 rounded-lg">\n          <p class="text-gray-500">No guild configurations found</p>\n          <p class="mt-2 text-sm text-gray-400">Note: New servers will inherit settings from the first configured server as a template</p>\n        </div>\n      ':this.guildConfigs.forEach((t=>e.appendChild(this.createGuildCard(t))));const t=document.getElementById("add-new-guild-button");t&&t.addEventListener("click",(()=>this.showAddGuildModal()))}createGuildCard(e){const t=e.guildId||e.id,i=document.createElement("div");i.className="border rounded-lg shadow-sm overflow-hidden bg-white",i.dataset.guildId=t;const n=e.iconUrl||e.icon?`https://cdn.discordapp.com/icons/${t}/${e.icon}.png`:"https://cdn.discordapp.com/embed/avatars/0.png";return i.innerHTML=`\n      <div class="flex items-center p-4 cursor-pointer hover:bg-gray-50" data-guild-id="${t}">\n        <div class="flex-shrink-0 h-12 w-12 rounded-full overflow-hidden bg-gray-200">\n          <img src="${n}" alt="${e.name}" class="h-full w-full object-cover">\n        </div>\n        <div class="ml-4 flex-1">\n          <h3 class="text-lg font-medium text-gray-900">${e.name}</h3>\n          <p class="text-sm text-gray-500">ID: ${t}</p>\n        </div>\n        <div class="ml-4 flex-shrink-0">\n          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${e.authorized?"bg-green-100 text-green-800":"bg-gray-100 text-gray-800"}">\n            ${e.authorized?"Authorized":"Not Authorized"}\n          </span>\n        </div>\n      </div>\n      <div class="flex justify-end p-2">\n        <button class="delete-guild-btn text-red-600 hover:text-red-800 text-sm">Delete</button>\n      </div>\n    `,i.querySelector("[data-guild-id]").addEventListener("click",(()=>this.selectGuild(t))),i.querySelector(".delete-guild-btn").addEventListener("click",(()=>{confirm(`Are you sure you want to delete the configuration for "${e.name}"?`)&&this.deleteGuildConfig(t)})),i}async deleteGuildConfig(e){try{const t=await fetch(`/api/guilds/${e}`,{method:"DELETE"});if(!t.ok)throw new Error(`HTTP error ${t.status}`);this.guildConfigs=this.guildConfigs.filter((t=>(t.guildId||t.id)!==e)),this.initializeGuildSelector(),this.selectedGuildId===e&&(this.selectedGuildId=null,document.getElementById("guild-settings-form").classList.add("hidden"),document.getElementById("no-server-selected").classList.remove("hidden")),this.showMessage("Guild configuration deleted successfully","success")}catch(e){console.error("Failed to delete guild configuration:",e),this.showMessage(`Error: ${e.message}`,"error")}}selectGuild(e){this.selectedGuildId=e,document.querySelectorAll("#guild-cards-container > div").forEach((t=>{t.classList.toggle("ring-2",t.dataset.guildId===e),t.classList.toggle("ring-indigo-500",t.dataset.guildId===e)})),document.getElementById("no-server-selected").classList.add("hidden");const t=document.getElementById("guild-settings-form");t.classList.remove("hidden");const i=this.guildConfigs.find((t=>(t.guildId||t.id)===e));i?this.populateForm(i):(this.showMessage("Guild configuration not found","error"),t.classList.add("hidden"),document.getElementById("no-server-selected").classList.remove("hidden"))}populateForm(e){document.getElementById("guild-id").value=e.guildId||e.id||"",document.getElementById("guild-name").value=e.name||"",document.getElementById("summoner-role").value=e.summonerRole||"";const t=document.getElementById("tool-emoji-summon");t&&(t.value=e.summonEmoji||"‚ú®"),document.getElementById("admin-roles").value=Array.isArray(e.adminRoles)?e.adminRoles.join(", "):"",document.getElementById("guild-authorized").checked=e.authorized||!1;const i=e.rateLimiting||{};document.getElementById("rate-limit-messages").value=i.messages||5,document.getElementById("rate-limit-interval").value=i.interval||60;const n=e.toolEmojis||{},d=document.getElementById("tool-emojis-container");d&&(d.innerHTML="",["summon","breed","attack","defend","move","remember","create","x","item","respond"].forEach((e=>{const t=document.createElement("div");t.className="sm:col-span-3",t.innerHTML=`\n          <label class="block text-sm font-medium text-gray-700">${e.charAt(0).toUpperCase()+e.slice(1)} Emoji</label>\n          <input type="text" id="tool-emoji-${e}" class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="" value="${n[e]||""}">\n        `,d.appendChild(t)})));const s=e.features||{};document.getElementById("feature-breeding").checked=s.breeding||!1,document.getElementById("feature-combat").checked=s.combat||!1,document.getElementById("feature-item-creation").checked=s.itemCreation||!1;const o=e.prompts||{};document.getElementById("intro-prompt").value=o.intro||"",document.getElementById("summon-prompt").value=o.summon||"",document.getElementById("attack-prompt").value=o.attack||"",document.getElementById("defend-prompt").value=o.defend||"",document.getElementById("breed-prompt").value=o.breed||"",document.getElementById("feature-view-details").checked=!1!==e.viewDetailsEnabled;const a=e.avatarTribeRestrictions||{};document.getElementById("avatar-tribe-mode").value=a.default?.mode||"permit",document.getElementById("avatar-tribe-exceptions").value=(a.default?.emojis||[]).join(", ");const r=document.getElementById("avatar-tribe-restrictions-channels");r.innerHTML="",a.channels&&Object.entries(a.channels).forEach((([e,t])=>{this.addAvatarTribeOverride(r,e,t)}))}initializeFormHandlers(){const e=document.getElementById("guild-settings-form");e&&e.addEventListener("submit",(async e=>{e.preventDefault(),await this.saveGuildSettings()}));const t=document.getElementById("add-avatar-tribe-override");t&&t.addEventListener("click",(()=>{this.addAvatarTribeOverride()}))}async saveGuildSettings(){if(this.selectedGuildId)try{this.showMessage("Saving guild settings...","info");const e=this.getFormData(),t=await fetch(`/api/guilds/${this.selectedGuildId}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const e=await t.json();throw new Error(e.error||"Failed to save guild settings")}const i=await t.json(),n=this.guildConfigs.findIndex((e=>(e.guildId||e.id)===this.selectedGuildId));-1!==n?this.guildConfigs[n]=i:this.guildConfigs.push(i),this.initializeGuildSelector(),this.showMessage("Guild settings saved successfully","success")}catch(e){console.error("Failed to save guild settings:",e),this.showMessage(`Error: ${e.message}`,"error")}else this.showMessage("No guild selected","error")}getFormData(){const e={guildId:document.getElementById("guild-id").value.trim(),name:document.getElementById("guild-name").value.trim(),summonerRole:document.getElementById("summoner-role").value.trim(),summonEmoji:document.getElementById("tool-emoji-summon").value.trim(),adminRoles:document.getElementById("admin-roles").value.split(",").map((e=>e.trim())).filter(Boolean),authorized:document.getElementById("guild-authorized").checked,whitelisted:document.getElementById("guild-authorized").checked,rateLimiting:{messages:parseInt(document.getElementById("rate-limit-messages").value,10)||5,interval:parseInt(document.getElementById("rate-limit-interval").value,10)||60},toolEmojis:{},features:{breeding:document.getElementById("feature-breeding").checked,combat:document.getElementById("feature-combat").checked,itemCreation:document.getElementById("feature-item-creation").checked},prompts:{intro:document.getElementById("intro-prompt").value.trim(),summon:document.getElementById("summon-prompt").value.trim(),attack:document.getElementById("attack-prompt").value.trim(),defend:document.getElementById("defend-prompt").value.trim(),breed:document.getElementById("breed-prompt").value.trim()},viewDetailsEnabled:document.getElementById("feature-view-details").checked};["summon","breed","attack","defend","move","remember","create","x","item","respond"].forEach((t=>{const i=document.getElementById(`tool-emoji-${t}`);i&&(e.toolEmojis[t]=i.value.trim())}));const t=document.getElementById("avatar-tribe-mode").value,i=document.getElementById("avatar-tribe-exceptions").value.split(",").map((e=>e.trim())).filter(Boolean),n={};return document.getElementById("avatar-tribe-restrictions-channels").querySelectorAll(".avatar-tribe-override-row").forEach((e=>{const t=e.querySelector(".avatar-tribe-channel-id").value.trim(),i=e.querySelector(".avatar-tribe-mode-select").value,d=e.querySelector(".avatar-tribe-exceptions-input").value.split(",").map((e=>e.trim())).filter(Boolean);t&&(n[t]={mode:i,emojis:d})})),e.avatarTribeRestrictions={default:{mode:t,emojis:i},channels:n},e}showMessage(e,t="info"){const i=document.getElementById("settings-message");i&&(i.innerHTML=e,i.classList.remove("hidden","message-success","message-error","message-info"),i.classList.add(`message-${t}`),"info"!==t&&setTimeout((()=>i.classList.add("hidden")),5e3))}setupManualWhitelistButton(){const e=document.getElementById("manual-whitelist-button");e&&e.addEventListener("click",(()=>{const e=document.getElementById("manual-guild-id"),t=document.getElementById("manual-guild-name");if(!e||!e.value)return void this.showMessage("Please enter a Discord server ID","error");const i=e.value.trim(),n=t?t.value.trim():`Server ${i}`;/^\d+$/.test(i)?this.whitelistGuild(i,n).then((()=>{e&&(e.value=""),t&&(t.value="")})):this.showMessage("Guild ID must be a numeric string","error")}))}addAvatarTribeOverride(e,t="",i={mode:"permit",emojis:[]}){const n=e||document.getElementById("avatar-tribe-restrictions-channels"),d=document.createElement("div");d.className="avatar-tribe-override-row flex space-x-2 items-center mb-2",d.innerHTML=`\n      <input type="text" placeholder="Channel ID" class="avatar-tribe-channel-id mt-1 block w-1/4 shadow-sm sm:text-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" value="${t}">\n      <select class="avatar-tribe-mode-select mt-1 block w-1/4 shadow-sm sm:text-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">\n        <option value="permit">Permit</option>\n        <option value="forbid">Forbid</option>\n      </select>\n      <input type="text" placeholder="Exceptions (comma-separated)" class="avatar-tribe-exceptions-input mt-1 block flex-1 shadow-sm sm:text-sm border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" value="${(i.emojis||[]).join(", ")}">\n      <button type="button" class="remove-avatar-tribe-override text-red-500 hover:text-red-700">&times;</button>\n    `,d.querySelector(".avatar-tribe-mode-select").value=i.mode||"permit",d.querySelector(".remove-avatar-tribe-override").addEventListener("click",(()=>d.remove())),n.appendChild(d)}async whitelistGuild(e,t){try{const i={guildId:e,name:t,authorized:!0,whitelisted:!0},n=await fetch("/api/guilds",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});if(!n.ok)throw new Error(`HTTP error ${n.status}`);await this.loadGuildConfigs(),this.initializeGuildSelector(),this.showMessage(`Guild "${t}" (ID: ${e}) authorized successfully!`,"success")}catch(e){console.error("Failed to authorize guild:",e),this.showMessage(`Error authorizing guild: ${e.message}`,"error")}}}document.addEventListener("DOMContentLoaded",(()=>{window.guildSettingsManager=new GuildSettingsManager}));